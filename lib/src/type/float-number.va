
use mem

global float_str_buf : ?ptr

trait FloatNumber {

    fn _string() String {
        return this.to_str(2)
    }

    fn to_str(decimals: uint (2)) String {
        let ipart = this @as int; 
        if (decimals == 0) : return ipart.to_str()
        let value = this
        let negative = value < 0
        if negative {
            value *= -1
        }

        // Get buffer
        if float_str_buf == null {
            float_str_buf = mem:alloc(64)
        }
        let buf = float_str_buf @as ptr
        let offset : uint = 0
        if negative {
            @ptrv(buf, u8, 0) = '-'
            offset++
        }

        //
        let ilen = ipart.to_base_to_ptr(10, buf + offset)
        offset += ilen
        @ptrv(buf, u8, offset) = '.'
        offset++
        
        // Get decimals by multiplying with 10^{amount of decimals}
        let x = 1
        let d = decimals
        while d-- > 0 {
            x *= 10
        }
        let fpart = value - ipart @as CLASS; 
        fpart = fpart * x; 

        let tail = fpart @as int
        let tlen = tail.to_base_to_ptr(10, buf + offset)

        return String.make_from_ptr(buf, tlen + offset)
    }
}
