
use mem;
use io;

class String {
    data: ptr
    bytes: uint

    fn to_uint() uint !not_a_number {
        return 0
    }
    fn to_lower() String {
        return this
    }

    static fn make_empty(length: uint) String {
        let d = mem:alloc(length + 1)
        @ptrv(d, u8, length) = 0
        return String {
            data: d
            bytes: length
        };
    }

    static fn make_from_ptr(data: ptr, length: uint) String {
        let s = String.make_empty(length);
        // let d = mem:alloc(length + 1)
        mem:copy(data, s.data, length)
        return s
        // @ptrv(d, u8, length) = 0
        // let str = String {
        //     data: d
        //     bytes: length
        // }
        let adr = mem:alloc(32)
        @ptrv(adr, u8, 0) = mem:state_const
        @ptrv(adr, u8, 1) = 0
        @ptrv(adr, u8, mem:byte_fields) = 0
        (adr @as String).data = d
        (adr @as String).bytes = length
        return adr @as String
    }

}
