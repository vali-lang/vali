
use mem;

struct StringConst {
    v1: u8 (0)
    v2: u8 (0)
    v3: u8 (0)
    v4: u8 (0)
    v5: u32 (0)
    data: ptr
    bytes: uint
}

class String {
    data: ptr
    bytes: uint

    fn to_uint() uint !not_a_number {
        return 0
    }
    fn to_lower() String {
        return this
    }
    fn _gc_free() {
        mem:free(this.data)
    }

    static fn make_empty(length: uint) String {
        let d = mem:alloc(length + 1)
        @ptrv(d, u8, length) = 0 // trailing 0 byte
        let str = String {
            data: d
            bytes: length
        }
        return str
    }

    static fn make_from_ptr(data: ptr, length: uint) String {
        let s = String.make_empty(length);
        mem:copy(data, s.data, length)
        return s
    }

    fn _add(add: String) String {
        let this_len = this.bytes
        let add_len = add.bytes
        let len = this_len + add_len
        let s = CLASS.make_empty(len)
        let data = s.data;
        mem:copy(this.data, data, this_len)
        mem:copy(add.data, @ptr_offset(data, this_len), add_len + 1) // + 1 for 0 byte
        return s
    }
}
