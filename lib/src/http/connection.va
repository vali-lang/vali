
header "sys" as sys

use io
use net
use utils
use fs

class Connection {
    server: Server
    netcon: net:Connection
    fd: FD

    // uploads: ?Array[String] (null)
    request: Request (Request{})
    parser: RequestParser (RequestParser{})
    added_active_body_size: bool (false)

    // Response
    output_file: ?fs:FileStream (null)
    output: utils:ByteBuffer (utils:ByteBuffer.new(8192))
    output_pos: uint (0)

    // Cache
    // request: ?Request (null)

    fn full_reset() {
        this.request.reset()
        this.parser.full_reset()
        this.reset_output()
    }

    fn reset_output() void {
        // Reset output
        let file = this.output_file
        if isset(file) {
            file.close()
            this.output_file = null
        }
        this.output.clear()
        this.output_pos = 0
    }

    fn send_file(stream: fs:FileStream, filename: ?String) void {

        let out = this.output
        let path = stream.path
        let fsize = fs:size(path)
        let ext = fs:ext(path)
        let mime = fs:mime(ext)

        this.output_file = stream

        out.append_str("HTTP/1.1 200 OK\r\nContent-Type: " + mime + "\r\nContent-Length: " + fsize + "\r\n")

        if isset(filename) {
            out.append_str("Content-Disposition: attachment filename=\"" + filename + "\"\r\n")
        }

        out.append_str("\r\n")
    }

    fn has_data_to_send() bool {
        if this.output_pos < this.output.length {
            return true
        }
        let file = this.output_file
        if isset(file) {
            if file.reading : return true
        }
        return false
    }
    fn count_bytes_to_send() uint {
        return this.output.length - this.output_pos
    }

    fn should_flush_output() bool {
        return this.count_bytes_to_send() > (128 * 1024) || this.output_file != null
    }

    async fn handle() {

        // Settings
        let server = this.server
        let max_hs = server.max_request_header_size
        let max_bs = server.max_request_body_size
        let max_sbs = server.max_server_wide_body_size

        let parser = this.parser
        let input = parser.input
        let request = this.request
        let file = this.output_file

        // Read headers
        while true {
        while !parser.parsed_headers {
            let rbytes : uint = 65535
            let bytes = await this.netcon.recv(input, rbytes) err ! {
                this.close()
                return
            }
            if bytes == 0 {
                return
            }

            parser.parse(request) err ! {
                if error_is(err, !http413) {
                    this.send_error(413)
                    return
                }
                this.send_error(400)
                return
            }
        }

        // Body
        while !parser.parsed_body {

            let rbytes : uint = 65535
            let bytes = await this.netcon.recv(input, rbytes) err ! {
                this.close()
                return
            }

            parser.parse(request) err ! {
                this.send_error(400)
                return
            }

            // // Check limits
            // if parser.parsed_headers {
            //     let len = parser.content_length
            //     if len > 0 {
            //         if len > max_bs {
            //             this.send_error(413)
            //             return
            //         }
            //         if server.active_body_size + len > max_sbs {
            //             this.send_error(413)
            //             return
            //         }
            //         if !this.added_active_body_size {
            //             this.added_active_body_size = true
            //             atomic(server.active_body_size + len)
            //         }
            //     }
            // }
        }

        // if this.added_active_body_size {
        //     this.added_active_body_size = false
        //     atomic(server.active_body_size - parser.content_length)
        // }

        parser.soft_reset()

        // if server.static_dirs.length > 0 {
        //     let path = request.path.trim("/")
        //     let found = false
        //     each server.static_dirs as dir {
        //         let fullpath = dir + path 
        //         if fs:is_file(fullpath) {
        //             let stream = fs:stream(fullpath, true, false) ! continue
        //             this.send_file(stream, null)
        //             request.reset()
        //             found = true
        //             break
        //         }
        //     }
        //     if found : break
        // }

        // Response
        let resp = server.handler(request)
        this.respond(resp)

        // Clear request
        request.reset()
        // TODO: Delete uploads

        // Flush output
        // if this.should_flush_output() {
        //     await this.send_response_bytes() err ! {
        //         this.close()
        //         return
        //     }
        //     this.reset_output()
        // }

        // Write output
        await this.send_response_bytes() err ! {
            this.close()
            return
        }
        this.reset_output()
        }
    }

    fn respond(resp: Response) void {
        let filepath = resp.filepath
        if isset(filepath) {
            let stream = fs:stream(filepath, true, false) ! {
                this.respond(Response.error(404))
                return
            }
            this.send_file(stream, resp.filename)
            return
        }

        resp.compile(this.output)
    }

    async fn send_response_bytes() !write {

        let out = this.output
        let file = this.output_file

        while true {
            // Check file stream
            if isset(file) {
                if this.count_bytes_to_send() == 0 {
                    if file.reading {
                        let part = file.read(65535) ? ""
                        out.append_str(part)
                    }
                    if !file.reading {
                        this.output_file = null
                        file = null
                    }
                }
            }

            let pos = this.output_pos
            let bytes = out.length - pos
            if bytes == 0 : break

            await this.netcon.send_from_ptr(out.data + pos, bytes) err ! {
                throw write
            }
            this.output_pos += bytes
        }
    }

    async fn send_error(code: uint) {
        if this.output.length == 0 {
            let resp = this.request.response
            resp.reset()
            resp.status = code @as u32
            this.respond(resp)
            await this.send_response_bytes() _
        }
        this.close()
    }

    fn close() {
        println("[+] Close connection: " + this.fd)
        // if this.added_active_body_size {
        //     atomic(this.server.active_body_size - this.parser.content_length)
        //     this.added_active_body_size = false
        // }
        this.full_reset()
        this.netcon.close()
    }

}


