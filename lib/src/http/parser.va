
@ignore_access_types

use utils
use mem
use io

struct RequestParser {
    stage: uint (0)
    input: utils:ByteBuffer (utils:ByteBuffer.new(8192))
    input_pos: uint (0)
    headers_length: uint (0)
    content_length: uint (0)
    parsed_headers: bool (false)
    parsed_body: bool (false)
    membuf: ptr (mem:alloc(4096))

    fn full_reset() {
        this.input_pos = 0
        this.input.clear()
        this.soft_reset()
    }

    fn soft_reset() {
        let input = this.input
        let pos = this.input_pos
        if pos >= input.length {
            this.input_pos = 0
            input.clear()
        }
        this.stage = 0
        this.headers_length = 0
        this.content_length = 0
        this.parsed_headers = false
        this.parsed_body = false
    }

    fn parse(request: Request) !invalid !http413 !need_more_data {

        if this.parsed_body {
            throw invalid
        }

        let input = this.input
        let pos = this.input_pos

        let stage = this.stage
        let data = input.data
        let length = input.length

        let membuf = this.membuf
        let header_data = request.header_data

        // Header
        if stage == 0 {
            let index = input.index_of_byte('\r', pos) ! {
                if length - pos > 4096 {
                    throw http413
                }
                throw need_more_data
            }

            if index + 1 == length : throw need_more_data
            if @ptrv(data, u8, index + 1) != '\n' { throw invalid }

            let space1 = input.index_of_byte(' ', pos) ! { throw invalid }
            let space2 = input.index_of_byte(' ', space1 + 1) ! { throw invalid }

            if space1 > index { throw invalid }
            if space2 > index { throw invalid }

            // Request "GET / HTTP/1.1"
            let method = input.sub_str(pos, space1 - pos)
            let path = input.sub_str(space1 + 1, space2 - space1 - 1)
            // let version = input.sub_str(space2 + 1, index - space2 - 1)

            request.method = method;
            request.path = path;

            pos = index + 2;
            this.input_pos = pos;
            stage = 1;
            this.stage = stage;
        }

        // Headers
        while stage == 1 {
            let index = input.index_of_byte('\r', pos) ! {
                if input.length - pos > 4096 {
                    throw http413
                }
                throw need_more_data
            }
            if index + 1 == length : throw need_more_data
            if @ptrv(data, u8, index + 1) != '\n' { throw invalid }

            if index == pos {
                // End of headers
                pos = index + 2
                this.input_pos = pos;
                stage = 2;
                this.stage = stage;
                this.parsed_headers = true
                break;
            }

            let split = input.index_of_byte(':', pos) ! { throw invalid }
            if split > index { throw invalid }
            while @ptrv(data, u8, split + 1) == ' ' {
                split++;
            }

            // let key = input.sub_str(pos, split - pos - 1);
            // let value = input.sub_str(split + 1, index - split - 1);
            // headers.set(key.to_lower(), value);
            // println(key)

            let key_len = split - pos - 1
            let value_len = index - split - 1
            if key_len > 4095 || value_len > 4095 : throw http413

            let headers_length = this.headers_length + key_len + value_len + 2
            if headers_length > 8192 : throw http413
            this.headers_length = headers_length

            let key_adr = input.data + pos
            let value_adr = input.data + split + 1
            // Convert key to lowercase
            mem:ascii_bytes_to_lower(key_adr, key_len)

            header_data.append_from_ptr(key_adr, key_len)
            header_data.append_byte(':')
            header_data.append_from_ptr(value_adr, value_len)
            header_data.append_str("\r\n")

            // io:print_from_ptr(key_adr, key_len)
            // print(":")
            // io:print_from_ptr(value_adr, value_len)
            // print("\n")

            let cmp = "content-length"
            if key_len == cmp.bytes && mem:equal(key_adr, cmp.data, cmp.bytes) {
                let content_len = mem:bytes_to_uint(value_adr, value_len) ! { throw invalid }
                this.content_length = content_len
            }

            pos = index + 2
            this.input_pos = pos;
        }

        if stage == 2 {
            let content_len = this.content_length
            let bytes_left = length - pos;
            if bytes_left < content_len {
                throw need_more_data
            }

            let body = input.sub_str(pos, content_len);

            pos += content_len;
            this.parsed_body = true
            request.body = body;
            this.stage = 3;

            this.input_pos = pos;
        }
    }

    fn _gc_free() {
        mem:free(this.membuf)
    }
}