
header "sys" as sys;

use os;
use net;
use io;
use fs;

fn test(req: Request) Response {
    return Response.html("Hello world!");
}

class Server {
    - host: String
    - port: u16
    - socket: net:SocketTCP
    - max_connections: uint
    - handler: fn(Request)(Response) (test)
    // - static_dirs: Array[String] (Array[String].new())
    show_info: bool (false)

    static fn new(host: String, port: u16, handler: fn(Request)(Response)) Server !socket_init_error !socket_bind_error {

        let max_connections : uint = 10000;
        let socket = net:Socket.new_tcp(host, port, false) ! { throw socket_init_error }
        socket.bind() ! {
            throw socket_bind_error
        }

        return Server{
            host: host,
            port: port,
            socket: socket,
            max_connections: max_connections,
            handler: handler,
        };
    }

    fn start(worker_count: i32 (16)) void {

        // SIGINT
        os:signal(1, interrupt);
        // SIGPIPE
        os:signal_ignore(13);

        if worker_count < 1 {
            worker_count = 1;
        }
        if worker_count > 128 {
            worker_count = 128;
        }

        if this.show_info {
            println("[+] Running http server on port " + this.port);
            println("[+] Worker count: " + worker_count);
        }

        worker_count--;
        while worker_count > 0 {
            let thread = os:Thread.start_with_data(Server.worker, this)
            worker_count--;
        }

        this.worker();
        os:sleep_ms(200);
    }

    - fn worker() {

        let max_connections = this.max_connections;
        let handler = this.handler;

        let sock = this.socket;
        let sock_fd = sock.fd;

        let poll = io:Poll[?Connection].new();
        let sock_lsn = poll.create_listener(sock_fd, null);
        sock_lsn.detect_read_request(true);

        let buffer = Array[io:Listener[?Connection]].new()

        while true {
            buffer.clear()
            let events = poll.wait(-1, buffer);
            let event_count = events.length;
            let i : uint = 0;

            while i < event_count {
                let lsn = events.get(i) ! { break }
                let fd = lsn.fd;
                i++;

                if fd == sock_fd {
                    // New connection
                    let netcon = sock.accept() ! {
                        // print("failed to accept\n")
                        continue
                    }

                    let fd = netcon.fd;
                    if this.show_info {
                        // println("[+] New connection: " + fd.str());
                    }

                    let http_con = Connection {
                        netcon: netcon,
                        fd: fd,
                    };

                    let lsn = poll.create_listener(fd, http_con);
                    lsn.detect_read_request(true);
                    lsn.detect_write_request(false);
                    continue;
                }

                let http_con = lsn.data @as Connection
                if lsn.data == null {
                    print("[x] Missing http connection for fd: \n") // + lsn.fd.str());
                    net:Socket.close(lsn.fd);
                    continue;
                };

                if http_con.fd != fd {
                    print("[x] fd mismatch\n");
                    net:Socket.close(fd);
                    continue;
                }

                // Existing connection
                if lsn.has_stopped_the_connection() {
                    if this.show_info {
                        println("[+] Close connection: " + fd)
                    }
                    net:Socket.close(fd);
                    continue;
                }

                if lsn.has_write_request() {
                    // println("[+] Continue sending response: " + fd.str());

                    if http_con.can_clear_out() {
                        http_con.reset_out();
                    }

                    http_con.send_response_bytes();

                    if http_con.has_data_to_send() == false {
                        lsn.detect_write_request(false);
                        http_con.reset_out();
                    }
                }
                if lsn.has_read_request() {
                    Server.respond(this, http_con, handler) ! {
                        if this.show_info {
                            println("[+] Invalid request: " + fd);
                        }
                        net:Socket.close(fd)
                        continue
                    }
                    if http_con.has_data_to_send() {
                        lsn.detect_write_request(true)
                    } else {
                        http_con.reset_out()
                    }
                }
            }
        }
    }

    - static fn respond(server: Server, http_con: Connection, handler: fn(Request)(Response)) void !read_error !sent_error {

        while true {

            let res = http_con.parse_result;
            let read_buf = http_con.read_buf;
            while true {
                if read_buf.read_index == read_buf.length {
                    // let bytes = http_con.netcon.recv(read_buf) ! |err| {
                    //     if err == err#e_again {
                    //         return;
                    //     }
                    //     http_con.respond(Response.error(400));
                    //     throw read_error, "Failed reading from connection";
                    // };
                    let bytes = http_con.netcon.recv(read_buf) ! {
                        return
                    }
                }
                Parser.parse_request(read_buf, res) ! {
                    http_con.respond(Response.error(400));
                    throw read_error //, "Invalid request";
                }

                read_buf.clear_before_read_index();

                if res.fully_parsed {
                    break
                }
            }

            if res.fully_parsed == false {
                return
            }

            http_con.reset_parser();

            // if data.static_dirs.length > 0 {
            //     let path = res.path.trim("/");
            //     each data.static_dirs as dir {
            //         let fullpath = dir + path; 
            //         if fs:is_file(fullpath) {
            //             let stream = fs:open(fullpath, true, false) !! continue;;
            //             http_con.send_file(stream, null);
            //             return;
            //         }
            //     }
            // }

            let req = Request{
                http_con: http_con,
			    headers: res.headers,
			    method: res.method,
			    body: res.body,
			    path: res.path,
            };
            let resp = handler(req);

            http_con.respond(resp);
        }
    }

    fn add_static_dir(path: String, relative_to_exe: bool (false)) void {
        // let full = path;
        // if relative_to_exe {
        //     full = fs:exe_dir() + "/" + path.trim("/");
        // }
        // full = full.rtrim("/") + "/";
        // if this.show_info {
        //     // println("[+] Add static dir: " + full);
        // }
        // this.static_dirs.push(full);
    }
}

global interrupted : bool;
fn interrupt(sig: i32) void {
    if(interrupted){
        os:exit(1);
    }
    interrupted = true;
    // println("Interrupt - Stopping http servers...");
    os:exit(1);
}

