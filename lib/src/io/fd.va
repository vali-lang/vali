
header "sys" as sys;
header "libuv" as uv;

alias FD as uint;

fn write(fd: FD, str: String) !failed !again {
    #if OS == win
    let bytes = str.bytes @as u32;
    #else
    let bytes = str.bytes;
    #end
    let c = sys:write(fd @as i32, str.data, bytes);
    if c == -2 {
        throw again;
    }
    if c < 0 {
        throw failed;
    }
}

fn write_from_ptr(fd: FD, data: ptr, length: uint) uint !failed !again {
    #if OS == win
    let bytes = length @as u32
    #else
    let bytes = length
    #end
    let c = sys:write(fd @as i32, data, bytes);
    if c == -2 {
        throw again;
    }
    if c < 0 {
        throw failed;
    }
    return c @as uint;
}

fn read(fd: FD, buffer: ptr, buffer_size: uint) uint !failed !again {
    let rcvd = sys:read(fd @as i32, buffer, buffer_size);
    if rcvd == -2 {
        throw again;
    }
    if rcvd < 0 {
        throw failed;
    }
    return rcvd @as uint;
}

fn close(fd: FD) {
    let c = sys:close(fd @as i32);
}
