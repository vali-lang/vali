
header "sys" as sys;

-- struct GcLock {
	- mutex: ptr

	static fn new() CLASS { 
        #if OS == win
		let mut = sys:CreateMutexA(null, mut, null);
        #else
		let mut = calloc(64);
		sys:pthread_mutex_init(mut, null);
        #end
		return CLASS { mutex: mut };
	}

	fn lock() void {
        #if OS == win
        sys:WaitForSingleObject(this.mutex, sys:INFINITE);
        #else
		sys:pthread_mutex_lock(this.mutex);
        #end
	}

	fn unlock() void {
        #if OS == win
        sys:ReleaseMutex(this.mutex);
        #else
		sys:pthread_mutex_unlock(this.mutex);
        #end
	}

    fn free() {
        #if OS == win
        sys:CloseHandle(this.mutex)
        #else
        free(this.mutex)
        #end
        free(this)
    }
}
