
use volt:mem
use volt:os
use volt:io

global stack : @ignu(Stack);
global disable_gc : bool;
global gc_transfer_size : uint;
global gc_mark_size : uint;
global gctick : uint

value state_unused (0)
value state_used (1)
value state_transfer (2)
value state_solid (4)
value state_const (8)
value state_shared (10)
value stack_size (1000000)

value vt_transfer (0)
value vt_mark (1)
value vt_mark_shared (2)
value vt_share (3)
value vt_gc_free (4)

value byte_state (0)
value byte_uu (1) // unused
value byte_age (2)
value byte_gc_age (3)

value byte_state_rel (-8)
value byte_uu_rel (-7)
value byte_age_rel (-6)
value byte_gc_age_rel (-5)

value trigger_lowest (0)
value trigger_buffer_size (1)
value trigger_gc_count (2)

struct Stack {
    stack_base : ptr
    stack_adr : ptr
    stack_adr_last : ptr

    lowest: ptr
    lowest_next : ptr

    transfer : ObjectChain
    shared : GcRing[ptr]
    // bumper : GcBumper

    age: u8 (33)
    gc_age: u8 (0)

    run_gc: bool (false)
    bumper_overflow: bool (false)
    clear_unknown: bool (false)

    force_full: bool (false)
    stopped: bool (false)

    static fn init() {

        let data = alloc(stack_size)
        // NOTE: Probably not needed
        let stackc = stack_size / sizeof(ptr)
        while stackc > 0 {
            stackc--
            @ptrv(data, ptr, stackc) = null
        }

        let s = Stack {
            stack_base: data
            stack_adr: data
            stack_adr_last: data

            lowest: data
            lowest_next: data + (100 * sizeof(ptr))

            transfer: ObjectChain.new()
            shared: GcRing[ptr].new()
            // bumper: GcBumper.init()
        }

        stack = s;
        disable_gc = false

        GcPool.init()

        let gcm = gc_manager()
        gcm.add_stack(s);
    }

    ///////////////////////
    // Runtime functions
    ///////////////////////
    static fn link(on: ptr, to: ptr) ptr {
        let to_state = @ptrv(to, u8, -8)
        let on_state = @ptrv(on, u8, -8)
        if on_state == state_shared {
            // TODO move item to shared
            // print("TODO: MOVE TO GLOBAL")
            @gc_share(to)
            return to
        }
        if to_state < state_transfer {
            // Transfer
            stack.transfer.add_item(to)
            @ptrv(to, u8, -8) = state_transfer
        }
        return to
    }

    ///////////////////////
    // Gc
    ///////////////////////
    fn gc() {
        if disable_gc {
            return
        }
        disable_gc = true
        this.run_gc = false
        gctick++

        let trigger_type : u8 = trigger_lowest
        if this.bumper_overflow {
            this.bumper_overflow = false
            trigger_type = trigger_buffer_size
        }
        this.mark_difference_down()
        this.handle_transfer_list()
        GcPool.free_unused_all()

        // Full clear
        if this.force_full {
            this.clear_unknown = true
            this.force_full = false
        }
        if gc_transfer_size > (gc_mark_size >> 1) {
            this.clear_unknown = true
        }
        if this.clear_unknown {
            //
            gc_mark_size = 0
            gc_transfer_size = 0
            // io:print_fake("f")
            //
            this.update_age()
            this.mark_stack_age()
            GcPool.clean_old_all(this.age)
            this.clear_unknown = false
            // Clean shared
            if gc_age != this.gc_age {
                this.mark_stack_gc_age()
                this.gc_age = gc_age
            }
        }
        GcPool.reset_all()

        // Adjust lowest stack point
        if this.lowest_next < this.lowest {
            // Lowest stack point
            this.lowest = this.lowest_next
        }
        if trigger_type == trigger_buffer_size {
            // io:print_fake("b")
            // Increase lowest point
            this.lowest = this.lowest_next
        // } else {
        //     io:print_fake("l")
        }


        this.stack_adr_last = this.stack_adr
        this.lowest_next = this.stack_adr + (1000 * sizeof(ptr))
        disable_gc = false
    }

    fn mark_difference_down() {
        let transfer = this.transfer

        let stack_base = this.stack_base
        let stack_adr = this.stack_adr
        let adr_last = this.stack_adr_last

        // Mark new items as transfer
        let adr = stack_adr;
        while adr > stack_base {
            let item_adr = adr - sizeof(ptr)
            adr = item_adr
            let item = @ptrv(item_adr, ptr, 0);
            if item != null {
                //
                let state = @ptrv(item, u8, -8)
                if state <= state_used {
                    // Transfer new items
                    transfer.add_item(item)
                    @ptrv(item, u8, -8) = state_transfer @as u8
                } 
            }
        }
    }

    fn handle_transfer_list() {
        let chain = this.transfer
        let last_list = chain.olist_last
        let last_index = chain.index
        let first_list = chain.olist_first
        let next_list = first_list

        // Mark solid
        while true {
            let list = next_list
            let index : uint = 0
            let is_last = list == last_list
            let until_ : uint = chain_size
            if is_last {
                until_ = last_index
            }
            let until = until_
            while index < until {
                let item = @ptrv(list, ptr, index)
                index++
                // Item logic
                if @ptrv(item, u8, -8) != state_transfer {
                    continue
                }
                let vtable = @ptrv(item, u32, -1)
                let table = @gc_get_vtable(vtable)
                let func = @ptrv(table, fn(ptr, u8)(void), vt_transfer)
                func(item, state_solid);
            }
            if is_last {
                break
            }
            next_list = @ptrv(list, ptr, chain_size)
            if next_list == null {
                break
            }
        }

        chain.wipe()
    }

    fn update_age() {
        let age : u8 = 64
        if this.age == 64 {
            age = 66
        }
        this.age = age
    }

    fn mark_stack_age() {
        let item_adr = this.stack_base
        let stack_adr = this.stack_adr
        let age = this.age
        while item_adr < stack_adr {
            let item = @ptrv(item_adr, ptr);
            if item != null {
                if @ptrv(item, u8, -8) < state_const {
                    if @ptrv(item, u8, -6) != age {
                        let vtable = @ptrv(item, u32, -1)
                        let table = @gc_get_vtable(vtable)
                        let func = @ptrv(table, fn(ptr, u8)(void), vt_mark)
                        func(item, age);
                    }
                }
            }
            item_adr = item_adr + sizeof(ptr)
        }
    }
    fn mark_stack_gc_age() {
        let item_adr = this.stack_base
        let stack_adr = this.stack_adr
        let age = gc_age
        while item_adr < stack_adr {
            let item = @ptrv(item_adr, ptr);
            if item != null {
                if @ptrv(item, u8, -8) < state_const {
                    if @ptrv(item, u8, byte_gc_age_rel) != age {
                        let vtable = @ptrv(item, u32, -1)
                        let table = @gc_get_vtable(vtable)
                        let func = @ptrv(table, fn(ptr, u8)(void), vt_mark_shared)
                        func(item, age);
                    }
                }
            }
            item_adr = item_adr + sizeof(ptr)
        }
    }

    fn add_shared(item: ptr) {
        print("ADD\n")
        this.shared.add(item)
    }
    fn clean_shared() {
        let ring = this.shared
        let tail = ring.last_index()
        let head = ring.index
        let size = ring.size
        let data = ring.data
        let age = gc_age
        while tail != head {
            let item = @ptrv(data, ptr, tail)
            if @ptrv(item, u8, byte_gc_age_rel) != age {
                // Free item
                @ptrv(item, u8, byte_state_rel) = state_solid
                ring.remove(tail)
            }

            tail++
            if tail == size {
                tail = 0
            }
        }
    }

    fn shutdown() {
        //
        this.force_full = true
        this.stack_adr = this.stack_base
        this.gc()
        //
        disable_gc = true
        this.transfer.delete()

        GcPool.delete_all()

        // Stack is deleted by the Gc
        this.stopped = true
    }


    fn print_stack() {
        print("---------\n")
        let item_adr = this.stack_base
        let stack_adr = this.stack_adr
        while item_adr < stack_adr {
            let item = @ptrv(item_adr, ptr);
            item.print()
            print("\n")
            item_adr = item_adr + sizeof(ptr)
        }
        print("---------\n")
    }
}

