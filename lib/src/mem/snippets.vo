
use io;
use os;

snippet stack_cache() {
    @cache_value(stack) as STACK
    @cache_value(STACK.stack_adr) as STACK_ADR
}

snippet stack_reserve(amount: V) {

    // if disable_gc == false {
    //     let x = amount
    //     while x-- > 0 {
    //         @ptrv(STACK_ADR, ptr, x) = null
    //     }
    // }
    STACK_ADR = STACK_ADR + (amount * sizeof(ptr));

} => (STACK, STACK_ADR)

snippet run_gc_check() {
    if disable_gc == false {
        let s = stack
        let sa = s.stack_adr
        if sa < s.lowest_next {
            s.lowest_next = sa
        }
        if sa <= s.lowest {
            // s.lowest_reached = false
            if pool_usage > 10 {
                s.run_gc = true
            }
        }
        if s.run_gc {
            s.gc()
        }
    }
}

snippet stack_reduce() {

    STACK_ADR = STACK_ADR

}
