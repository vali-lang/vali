
snippet reserve(amount: V) {
    @cache_value(stack) as STACK
    @cache_value(STACK.stack_adr) as STACK_ADR

    let x = amount
    while x-- > 0 {
        @ptrv(STACK_ADR, ptr, x * 2) = null
    }

    let space_added = STACK.bump.space_added
    // if STACK.run_gc_timeout == 0 {
    //     STACK.gc()
    // } else
    if space_added > STACK.space_min {
        if STACK_ADR <= STACK.lowest {
            STACK.gc(trigger_lowest)
        } else if space_added > STACK.space_max {
            STACK.gc(trigger_buffer_size)
        } else if STACK.gc_count++ > STACK.gc_trigger {
            STACK.gc(trigger_gc_count)
        }
    }

    STACK_ADR = STACK_ADR + (amount * sizeof(ptr) * 2);
} => (STACK, STACK_ADR)

snippet pop() {
    STACK_ADR = STACK_ADR

    if STACK_ADR < STACK.lowest_next {
        STACK.lowest_next = STACK_ADR
    }
}

