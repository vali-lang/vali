
use io;
use os;

snippet stack_reserve(amount: V) {
    @cache_value(stack) as STACK
    @cache_value(STACK.stack_adr) as STACK_ADR

    // reserve_(amount, STACK_ADR)
    STACK_ADR = STACK_ADR + (amount * sizeof(ptr));

} => (STACK, STACK_ADR)

snippet run_gc_check() {
    // run_gc_check_()
    if disable_gc == false {
        let s = stack
        if s.lowest_reached {
            s.lowest_reached = false
            if pool_usage > 10 {
                s.run_gc = true
            }
        }
        if s.run_gc {
            s.gc()
        }
    }
}

snippet stack_reduce() {
    // scope_end_(amount, STACK_ADR)

    STACK_ADR = STACK_ADR

    if STACK_ADR <= STACK.lowest {
        STACK.lowest_reached = true 
    }
    if STACK_ADR < STACK.lowest_next {
        STACK.lowest_next = STACK_ADR
    }
}

// snippet pop_return(retv: V) {
//     STACK_ADR = STACK_ADR
// }

// snippet pop_no_return() {
//     STACK_ADR = STACK_ADR
// }
