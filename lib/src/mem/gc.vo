
use volt:mem
use volt:os

shared gc_instance : ?GC
shared gc : bool
shared gc_age : u8
shared gc_busy : uint

struct GC {
    stacks : ptr
    stack_count : int (0)

    static fn start() {
        gc_instance = GC {
            stacks: mem:alloc(10000)
        }
        os:Thread.start(GC.loop @as ptr)
    }

    fn add_stack(s: Stack) {
        let index = this.stack_count
        @ptrv(this.stacks, Stack, index) = s
        // todo atomic increment
        this.stack_count = index + 1
    }

    static fn loop() {
        let g = gc_instance;
        while 1 == 1 {
            let sc = g.stack_count;
            let stacks = g.stacks;
            // Increase age + mark gc as running
            gc_age++
            gc = true
            os:sleep_ms(1); // Optional
            // Loop stacks
            let si = sc;
            while si-- > 0 {
                let s = @ptrv(stacks, Stack, si);
                s.mark();
            }
            gc = false
            // Wait for other threads
            while gc_busy > 0 {
                os:sleep_ms(1);
            }
            // Delete unmarked objects
            while si-- > 0 {
                let s = @ptrv(stacks, Stack, si);
                s.delete_unmarked();
            }
            // Wait
            os:sleep_ms(150);
        }
    }
}
