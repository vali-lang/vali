
use volt:mem
use volt:os

shared gc_instance : ?GC
shared gc_age : u8
shared gc_busy : uint
shared gc_object_count : int

// item :
// state(u8)    0 new 1 unknown 2 solid
// in_list(u8)  0 new 1 unknown 2 none 3 transfer
// fields(u8)

struct GC {
    stacks : ptr
    stack_count : int (0)

    static fn start() {
        gc_instance = GC {
            stacks: mem:alloc(10000)
        }
        os:Thread.start(GC.loop @as ptr)
    }

    fn add_stack(s: Stack) {
        let index = this.stack_count
        @ptrv(this.stacks, Stack, index) = s
        atomic(this.stack_count + 1)
    }

    static fn loop() {
        let g = gc_instance;
        let cycles = 0
        let count = gc_object_count
        let comp = 100 + count + count / 90
        let last_age = gc_age
        while 1 == 1 {
            let sc = g.stack_count;
            let stacks = g.stacks;
            // Loop stacks
            let si = sc;
            while si-- > 0 {
                let s = @ptrv(stacks, Stack, si);
                s.lowest = s.lowest_next 
                s.lowest_next = 99999999 @as uint
                s.allow_gc = true
            }
            os:sleep_ms(150)
        }
    }
}
