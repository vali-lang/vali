
use volt:mem
use volt:os

shared gc_instance : ?Gc
shared gc_age : u8
shared gc_busy : uint
shared gc_object_count : int

fn gc_alloc(size: u32, sub_field_count: u8) ptr {
    let adr = allocator.alloc(size @as uint)
    @ptrv(adr, i32, 0) = 0
    @ptrv(adr, u32, 1) = size @as u32
    @ptrv(adr, u8, byte_fields) = sub_field_count
    return adr
}

struct Gc {
    stacks : ptr
    stack_count : int (0)

    static fn start() {
        gc_instance = Gc {
            stacks: mem:alloc(10000)
        }
        os:Thread.start(Gc.loop @as ptr)
    }

    fn add_stack(s: Stack) {
        let index = this.stack_count
        @ptrv(this.stacks, Stack, index) = s
        atomic(this.stack_count + 1)
    }

    static fn loop() {
        let g = gc_instance;
        let cycles = 0
        let last_age = gc_age
        let x = 0 @as uint;
        while true {
            x++
            let sc = g.stack_count;
            let stacks = g.stacks;
            // Loop stacks
            let si = sc;
            while si > 0 {
                si--
                let s = @ptrv(stacks, Stack, si);
            }
            os:sleep_ms(10)
        }
    }
}
