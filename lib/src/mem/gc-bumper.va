
value bump_block_size (100000)

global bumper_usage : uint

struct GcBumper {
    - first : ptr (null @as ptr)
    - base : ptr (null @as ptr)
    - adr : ptr (null @as ptr)
    - block_count : uint (0)
    - block_total : uint (0)
    - block_total_last : uint (1)

    static fn init() CLASS {
        let b = CLASS{}
        b.create_new_block()
        b.first = b.base
        return b
    }

    fn create_new_block() {
        let block = alloc(bump_block_size)
        // Set next null
        @ptrv(block, ?ptr) = null
        if this.base != null {
            // Set next in previous block
            @ptrv(this.base, ptr) = block
        }
        this.base = block
        this.adr = block + sizeof(ptr) @as ptr
        this.block_total++
    }

    fn alloc_for_size(size: uint) ptr {
        // Allow large sizes
        let next = @ptrv(this.base, ptr)
        if next == null {
            this.create_new_block()
        } else {
            this.base = next
            this.adr = next + sizeof(ptr) @as ptr
        }
        this.block_count++
        bumper_usage = this.block_count * 100 / this.block_total_last
        if bumper_usage > 120 {
            stack.run_gc = true
            stack.bumper_overflow = true
        }
        return this.adr @as ptr
    }

    fn wipe() {
        this.base = this.first
        this.adr = this.first + sizeof(ptr) @as ptr
        this.block_count = 0
        bumper_usage = 0
        this.block_total_last = this.block_total
    }

    // DEBUG FUNCTIONS
    fn contains(item: ptr) bool {
        let block = this.first @as ptr
        while block != null {
            if item > block {
                if item < (block + bump_block_size) {
                    return true
                }
            }
            block = @ptrv(block, ptr, 0)
        }
        return false
    }
}
