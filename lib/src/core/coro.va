
use mem
use os

// global coroutines_ : ?Array[Coro] (null)
global run_coroutine : ?Coro (null)

// Stack layout: {alloca-items} {gc-stack-items}

class Coro {
    stack: ptr
    gc_stack: ptr
    gc_item_count: uint
    result: ptr
    handler: fn()()
    resume_index: u32 (0)
    done: bool (false)
    error: u32 (0)

    static fn new(stack_size: uint, gc_item_count: uint, result_offset: uint, result_is_gc: bool, handler: ptr) CLASS {
        let align = (sizeof(ptr) - (stack_size % sizeof(ptr))) % sizeof(ptr)
        let gc_size = gc_item_count * sizeof(ptr)
        let size = stack_size + align + gc_size
        let data = mem:calloc(size)
        let gc_stack = data + stack_size + align
        let result = <{
            if result_is_gc {
                return gc_stack + (result_offset * sizeof(ptr))
            }
            return data + result_offset
        }

        let coro = CLASS {
            stack: data
            gc_stack: gc_stack
            gc_item_count: gc_item_count
            result: result
            handler: handler @as fn()()
        }
        let list = mem:coros
        list.add(coro)
        return coro
    }

    fn resume() {
        if this.done : return
        run_coroutine = this
        this.handler()
    }

    fn await_coro(coro: Coro) {
    }
    fn await_fd(fd: FD, read: bool, write: bool) {
        println("awa fd")
    }

    static fn loop() {
                    print("loop")
        let ring = mem:coros
        while ring.length > 0 {
            let tail = ring.last_index()
            let head = ring.index
            let size = ring.size
            let data = ring.data
            while tail != head {
                let coro = @ptrv(data, Coro, tail)
                if coro.done {
                    print("Rem")
                    ring.remove(tail)
                    break
                }
                    print("Res")
                coro.resume()

                // Next
                tail++
                if tail == size {
                    tail = 0
                }
            }
        }
                    print("stop-loop")
    }

    ///////////////////
    // GC list
    ///////////////////
    --- static fn transfer_check() {
        let ring = mem:coros
        let tail = ring.last_index()
        let head = ring.index
        let size = ring.size
        let data = ring.data
        while tail != head {
            let coro = @ptrv(data, Coro, tail)
            mem:gc_transfer_item(coro)
            coro._gc_transfer()

            // Next
            tail++
            if tail == size {
                tail = 0
            }
        }
    }

    --- static fn mark_all() {
        let ring = mem:coros
        let tail = ring.last_index()
        let head = ring.index
        let size = ring.size
        let data = ring.data
        while tail != head {
            let coro = @ptrv(data, Coro, tail)
            mem:gc_mark_item(coro)

            // Next
            tail++
            if tail == size {
                tail = 0
            }
        }
    }

    --- static fn mark_shared_all() {
        let ring = mem:coros
        let tail = ring.last_index()
        let head = ring.index
        let size = ring.size
        let data = ring.data
        while tail != head {
            let coro = @ptrv(data, Coro, tail)
            mem:gc_mark_shared_item(coro)

            // Next
            tail++
            if tail == size {
                tail = 0
            }
        }
    }

    ///////////////////
    // GC
    ///////////////////
    fn _gc_transfer() {
        let x = this.gc_item_count
        let data = this.gc_stack
        while x-- > 0 {
            mem:gc_transfer_item(@ptrv(data, ptr, x))
        }
    }
    fn _gc_mark() {
        let data = this.gc_stack
        let x = this.gc_item_count
        while x-- > 0 {
            mem:gc_mark_item(@ptrv(data, ptr, x))
        }
    }
    fn _gc_mark_shared() {
        let data = this.gc_stack
        let x = this.gc_item_count
        while x-- > 0 {
            mem:gc_mark_shared_item(@ptrv(data, ptr, x))
        }
    }
    fn _gc_free() {
        let s = this.stack
        if s != null : mem:free(s)
    }
}