
use mem

global coroutines : ?Array[Coro] (null)
global run_coroutine : ?Coro (null)

// Stack layout: {gc-stack-items} {other-bytes}

class Coro {
    stack: ptr
    gc_stack: ptr
    gc_item_count: uint
    result: ptr
    handler: fn()()
    resume_index: u32 (0)
    done: bool (false)
    error: u32 (0)

    static fn new(stack_size: uint, gc_item_count: uint, result_offset: uint, result_is_gc: bool, handler: ptr) CLASS {
        let gc_size = gc_item_count * sizeof(ptr)
        let size = stack_size + gc_size
        let data = mem:calloc(size)
        let gc_stack = data + stack_size
        let result = <{
            if result_is_gc {
                return gc_stack + (result_offset * sizeof(ptr))
            }
            return data + result_offset
        }

        let coro = CLASS {
            stack: data
            gc_stack: gc_stack
            gc_item_count: gc_item_count
            result: result
            handler: handler @as fn()()
        }
        let list = coroutines
        if list == null : list = array[Coro]{}
        if isset(list) : list.push(coro)
        return coro
    }

    fn resume() {
        if this.done : return
        run_coroutine = this
        this.handler()
    }

    ///////////////////
    // GC
    ///////////////////
    fn _gc_transfer() {
        let x = this.gc_item_count
        let data = this.gc_stack
        while x-- > 0 {
            mem:gc_transfer_item(@ptrv(data, ptr, x))
        }
    }
    fn _gc_mark() {
        let data = this.gc_stack
        let x = this.gc_item_count
        while x-- > 0 {
            mem:gc_mark_item(@ptrv(data, ptr, x))
        }
    }
    fn _gc_mark_shared() {
        let data = this.gc_stack
        let x = this.gc_item_count
        while x-- > 0 {
            mem:gc_mark_shared_item(@ptrv(data, ptr, x))
        }
    }
    fn _gc_free() {
        let s1 = this.stack
        let s2 = this.gc_stack
        if s1 != null : mem:free(s1)
        if s2 != null : mem:free(s2)
    }
}