
struct TestResult {
    name: ?String (null)
    // Asserts
    as_count: uint (0)
    as_failed: uint (0)
    tests_count: uint (0)
    tests_fail_count: uint (0)
    // Error at
    fail_path: String ("")
    fail_line: uint (0)


    fn reset(name: String) {
        this.name = name
        this.as_count = 0
        this.as_failed = 0
        this.fail_path = ""
        this.fail_line = 0
    }
}

fn test_init() TestResult {
    return TestResult{};
}

fn test_assert(check: bool, result: TestResult, path: String, line: uint) {
    result.as_count++
    if check == false {
        if result.as_failed == 0 {
            result.fail_path = path
            result.fail_line = line
        }
        result.as_failed++
    }
}

fn test_result(result: TestResult) {
    let name_ = result.name
    let name = isset(name_) ? name_ : "TEST-WITHOUT-NAME"
    let failed = result.as_failed > 0

    if name.bytes > 50 {
        name = name.sub_str_bytes(0, 64)
    }
    if name.bytes % 2 != 0 {
        name += " "
    }
    let dots = " ."
    let bytes = name.bytes
    while bytes < 54 {
        dots += " ."
        bytes += 2
    }

    print("> " + name + dots + " " + (failed ? "FAIL" : "OK") + "\n")

    if(failed) {
        print("# FAILED IN: " + result.fail_path + "\n")
        print("# ON LINE: " + result.fail_line + "\n")
        result.tests_fail_count++
    }
    result.tests_count++
}

fn test_final_result(result: TestResult) {
    println("-----------------------")
    println("TESTS FAILED: " + result.tests_fail_count)
    println("TESTS SUCCESS: " + (result.tests_count - result.tests_fail_count))
    println("-----------------------")
}
