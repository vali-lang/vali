
header "sys" as sys

use mem

global EXE_PATH : ?String
global EXE_DIR : ?String

value PATH_MAX (4096)

// class Path {
// 	parts: Array[String]

// 	static fn new(path: String) Path {
// 		return Path{
// 			parts: path.split("/"),
// 		}
// 	}

// 	static fn exe_dir() Path {
// 		let path = Path.exe_path()
// 		path.pop()
// 		return path
// 	}
// 	static fn exe_path() Path {
// 		return Path.new(exe_dir())
// 	}

// 	fn copy() Path {
// 		let parts = this.parts
// 		let new = Array[String].new()
// 		each parts as part {
// 			new.push(part)
// 		}
// 		return Path{
// 			parts: new,
// 		}
// 	}

// 	fn pop() void {
// 		let v = this.parts.pop() !! return
// 	}

// 	//fn to_str() String {
// 	//	return this.parts.join("/")
// 	//}
// }

fn exe_dir() String {
    let dir = EXE_DIR
    if isset(dir) {
        return dir
    }
    let d = dir_of(exe_path())
	EXE_DIR = d
	return d
}

fn exe_path() String {
    let p = EXE_PATH
    if isset(p) {
        return p
    }
	let str = String.make_empty(PATH_MAX)
	let data = str.data

	#if OS == win
   	let len = sys:GetModuleFileNameA(null, data, PATH_MAX)
	#else
	let link = "/proc/self/exe".data @as cstring
   	let len = sys:readlink(link, data, PATH_MAX)
	mem:free(link)
	#end

    EXE_PATH = str
	return str
}

fn ext(path: String) String {
	let len = path.bytes
	let start = len
	let found = false
	while start > 0 {
		start--
		let ch = path.byte(start)
		if ch == '.' {
			start++
			found = true
			break
		}
		if ch == '/' || ch == '\\' {
			break
		}
	}
	if found == false {
		return ""
	}
	return path.sub_str_bytes(start, len - start)
}

// e.g. /etc/nginx/nginx.conf -> /etc/nginx
// e.g. /etc/nginx/ -> /etc
// e.g. /etc -> /
// e.g. "" -> ""
// e.g. etc -> etc
fn dir_of(path: String) String {
	let end = path.bytes - 1
	while(end > 0){
		end--
		let ch = path.byte(end)
		if(ch == '/' || ch == '\\'){
			if end == 0 {
				end++
			}
			return path.sub_str_bytes(0, end)
		}
	}
	return path + ""
}

// e.g. /etc/nginx/nginx.conf -> nginx.conf
// e.g. /etc/nginx/ -> nginx
// e.g. / -> ""
// e.g. "" -> ""
fn basename(path: String) String {
	let len = path.bytes
	let start = len
	while(start > 0){
		start--
		let ch = path.byte(start)
		if(ch == '/' || ch == '\\'){
			start++
			break
		}
	}
	return path.sub_str_bytes(start, len - start)
}
