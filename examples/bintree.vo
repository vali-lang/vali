
class Node {
    left : ?Node (null)
    right : ?Node (null)

    static fn tree(x: int) Node {
        if x == 0 {
            let res = Node {}
            return res
        }
        let l = Node.tree(x - 1)
        let r = Node.tree(x - 1)
        let res = Node {
            left: l
            right: r
        }
        return res
    }

    fn check() uint {
        let res : uint = 1
        let lt = this.left
        let rt = this.right
        if isset(lt) && isset(rt) {
            res += lt.check()
            res += rt.check()
        }
        return res
    }
}

fn stretch(depth: int) {
    let check = Node.tree(depth).check()
    println("stretch tree of depth " + depth.to_str() + "\t check: " + check.to_str())
}

fn main() {

    let depth = 17

    stretch(depth + 1)

    let longlived = Node.tree(depth)

    let x = 4
    while x <= depth {
        let mul = (depth - x + 4)
        let iters = 1
        while mul-- > 0 {
            iters = iters * 2
        }
        let check = 0 @as uint

        let i = 0
        while i++ < iters {
            check += Node.tree(x).check()
        }
        println(iters.to_str() + "\t trees of depth " + x.to_str() + "\t check: " + check.to_str())
        x += 2
    }

    println("long lived tree of depth " + depth.to_str() + "\t check: " + longlived.check().to_str())
}
